// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Appylar_SDK_iOS
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import Appylar_SDK_iOS
import Foundation
import SafariServices
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AdViewController : UIKit.UIViewController, WebKit.WKNavigationDelegate, WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) public var orientationType: UIKit.UIInterfaceOrientationMask?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func showInterstitialAds()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Appylar_SDK_iOS.AdViewController : WebKit.WKScriptMessageHandler, SafariServices.SFSafariViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
}
public enum BannerPosition {
  case top
  case bottom
  public static func == (a: Appylar_SDK_iOS.BannerPosition, b: Appylar_SDK_iOS.BannerPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Appylar : ObjectiveC.NSObject {
  public static func canShowAd(Adtype: Appylar_SDK_iOS.AdType) -> Swift.Bool
  public static var adeventlistener: Appylar_SDK_iOS.AdEventListener?
  public static func initializeWithApiKey(testmode: Swift.Bool, app_Key: Swift.String, app_id: Swift.String, orientations: [Appylar_SDK_iOS.AdOrientation], Adtypes: [Appylar_SDK_iOS.AdType])
  public static func setParameters(bannerHeight: Swift.Int, ageRestriction: Swift.Int)
  @objc deinit
}
public enum AdOrientation : Swift.String {
  case portrait
  case landscape
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AdType : Swift.String {
  case banner
  case interstitial
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol AdEventListener {
  func onInitialized(token: Swift.String)
  func onError(description: Swift.String)
  func onNoAd()
  func onLoadAds()
  func onAdShown(type: Appylar_SDK_iOS.AdType)
  func onInterstitialClosed()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BannerView : UIKit.UIView, SafariServices.SFSafariViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) public func showAds(position: Appylar_SDK_iOS.BannerPosition? = .top)
  @_Concurrency.MainActor(unsafe) public func hideBanner()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Appylar_SDK_iOS.BannerView : WebKit.WKUIDelegate, WebKit.WKNavigationDelegate, WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
}
extension Appylar_SDK_iOS.BannerPosition : Swift.Equatable {}
extension Appylar_SDK_iOS.BannerPosition : Swift.Hashable {}
extension Appylar_SDK_iOS.AdOrientation : Swift.Equatable {}
extension Appylar_SDK_iOS.AdOrientation : Swift.Hashable {}
extension Appylar_SDK_iOS.AdOrientation : Swift.RawRepresentable {}
extension Appylar_SDK_iOS.AdType : Swift.Equatable {}
extension Appylar_SDK_iOS.AdType : Swift.Hashable {}
extension Appylar_SDK_iOS.AdType : Swift.RawRepresentable {}
